
#line 2 "../../src/intel-lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 140
#define YY_END_OF_BUFFER 141
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[264] =
    {   0,
        0,    0,  141,  139,    1,    2,  139,  139,    3,    3,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,    0,  138,    3,    0,  137,  137,  137,  111,  107,
      137,  115,  114,  110,  120,  118,  137,  137,  137,  137,
      112,  108,  137,  102,  137,  116,  131,  133,  137,  113,
      122,  109,  134,  103,  132,  117,  137,  137,  137,  137,
      137,  104,  137,  105,  137,  106,  137,  137,  137,   34,
      137,   48,   43,   43,   45,   56,   53,  137,  137,   41,
       51,   49,  137,  137,  137,  137,  137,  137,  137,  137,

       71,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  121,  119,  137,  137,  137,  137,  137,  137,
      137,    5,  138,    4,   11,   12,   13,   14,   15,   16,
       17,  137,  137,   19,   20,   21,   22,   23,   24,   26,
       28,   29,  137,  123,  128,  126,  124,  130,  125,  137,
      129,  127,   10,  137,   31,  137,  137,   35,   36,   37,
      137,   44,   47,   54,   55,   57,   47,   44,   46,   55,
       54,   42,   52,   50,   51,  137,   59,  137,  137,  137,
       65,   67,  137,   68,   69,   70,   72,   74,  137,   80,
       81,   83,   84,   85,   86,  137,   91,   88,   89,  137,

      137,   92,   93,   94,   96,  137,   97,  137,  137,  137,
      137,  101,    6,   18,   25,   27,  137,  137,  137,   32,
       33,   38,   39,   40,   48,   53,   56,   58,  137,   61,
       62,  137,   66,    9,   73,   75,   76,   77,  137,   83,
       87,   90,  137,   95,   98,    7,   99,  100,    8,   30,
      137,   60,  137,   64,   78,   79,   82,  137,  136,   63,
      137,  135,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    1,    1,    1,    1,    4,    1,
        1,    1,    1,    1,    1,    5,    1,    6,    7,    7,
        8,    7,    7,    7,    7,    7,    7,    1,    1,    1,
        1,    1,    1,    1,    9,    9,    9,    9,    9,    9,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   11,   10,   10,
        1,   12,    1,    1,   10,    1,   13,   14,   15,   16,

       17,   18,   19,   20,   21,   22,   10,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       36,   37,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[38] =
    {   0,
        1,    1,    1,    2,    1,    3,    3,    3,    4,    5,
        5,    2,    4,    4,    4,    4,    4,    4,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5
    } ;

static const flex_int16_t yy_base[269] =
    {   0,
        0,    0,  294,  295,  295,  295,    0,    0,   32,   38,
        0,   55,   27,   78,  100,  123,   28,   19,  270,   32,
      141,   38,   27,   43,   41,   50,   62,  166,  275,  265,
       70,  286,    0,   97,    0,    0,   94,   50,    0,    0,
      273,    0,    0,    0,    0,    0,  257,  264,  252,  257,
        0,   68,  257,    0,  267,    0,    0,    0,  267,    0,
      248,    0,    0,    0,  254,    0,  244,   60,  243,   65,
      246,   88,  247,    0,  249,    0,  243,  252,  240,   96,
      254,  253,  252,    0,    0,  251,  250,  239,  186,    0,
       80,    0,  245,  251,  103,  237,  229,  238,  112,  113,

        0,  229,  232,  228,  118,  115,  120,  153,  243,  243,
      240,  122,    0,    0,  169,  240,  223,  223,  231,  237,
      220,  295,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  231,  224,    0,    0,    0,    0,    0,  216,  228,
        0,    0,  215,    0,    0,    0,    0,    0,    0,  226,
        0,    0,    0,  228,    0,  208,  217,    0,    0,   73,
      208,    0,    0,    0,    0,    0,  208,  205,    0,  204,
      203,    0,    0,    0,    0,  201,  185,  187,  188,  185,
      181,    0,  181,    0,    0,    0,  178,  139,  187,    0,
        0,  125,    0,    0,    0,  188,    0,    0,    0,  174,

      171,    0,    0,    0,    0,  166,    0,  163,  176,  172,
      158,    0,    0,    0,    0,    0,  172,  148,  159,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  153,    0,
      138,  145,    0,    0,    0,    0,    0,  156,  122,    0,
        0,    0,  112,    0,    0,    0,    0,    0,    0,    0,
      109,    0,   85,    0,    0,    0,    0,   48,    0,    0,
       27,    0,  295,  223,  225,  228,  231,  234
    } ;

static const flex_int16_t yy_def[269] =
    {   0,
      263,    1,  263,  263,  263,  263,  264,  265,  263,  263,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  263,  267,  263,  268,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,

      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  263,  267,  268,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,

      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,    0,  263,  263,  263,  263,  263
    } ;

static const flex_int16_t yy_nxt[333] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   10,   11,   11,
       11,    4,   12,   13,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   11,   27,   28,
       29,   11,   11,   30,   31,   11,   11,   34,   34,   34,
       73,   75,   35,   34,   34,   34,   43,   78,   76,   44,
       93,  262,   97,   45,   94,   79,   80,   74,   98,   99,
       81,   46,   47,   95,  129,  130,   35,   37,  100,  101,
       38,   96,  102,  261,   39,  103,  105,   40,  106,   41,
      222,  104,  136,  137,  119,  148,  145,  107,  138,   42,
       48,   49,  120,   50,  146,  121,  175,   51,  223,  149,

       52,   53,   34,   34,   34,  173,  125,   54,  151,  126,
      158,   55,   56,   57,  152,   58,   59,  127,  178,   60,
       61,  260,   62,  128,  183,  159,  160,   63,  179,   64,
      184,  259,  258,   65,   66,   67,   68,   69,   70,  185,
      190,  192,  194,  186,  197,  193,  191,   71,  195,  239,
      202,  236,   72,   82,   83,   84,  237,   85,  257,   86,
      249,  240,  253,   87,   88,   89,   90,   91,  255,  252,
       92,  251,  196,  256,  254,  197,  250,   85,  108,  109,
      110,  198,  111,  203,  204,  112,  113,  249,  248,  205,
      247,  246,  114,  245,  206,  244,  115,  116,  167,  168,

      162,  243,  169,  242,  170,  241,  238,  235,  171,  234,
      233,  172,  173,  232,  231,  174,  230,  229,  228,  227,
      226,  225,  169,   32,   84,   32,   32,   32,   33,   33,
       36,   36,   36,  123,  123,  123,  124,  124,  224,  221,
      220,  219,  218,  217,  216,  215,  214,  213,  212,  211,
      210,  209,  208,  207,  201,  200,  199,  189,  188,  187,
      182,  181,  180,  177,  176,  166,  165,  164,  163,  162,
      161,  157,  156,  155,  154,  153,  150,  147,  144,  143,
      142,  141,  140,  139,  135,  134,  133,  132,  131,  122,
      118,  117,   77,  263,    3,  263,  263,  263,  263,  263,

      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263
    } ;

static const flex_int16_t yy_chk[333] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    9,    9,    9,
       17,   18,    9,   10,   10,   10,   13,   20,   18,   13,
       22,  261,   23,   13,   22,   20,   20,   17,   23,   24,
       20,   13,   13,   22,   38,   38,    9,   12,   24,   25,
       12,   22,   25,  258,   12,   26,   27,   12,   27,   12,
      160,   26,   52,   52,   31,   70,   68,   27,   52,   12,
       14,   14,   31,   14,   68,   31,   91,   14,  160,   70,

       14,   14,   34,   34,   34,   91,   37,   14,   72,   37,
       80,   14,   14,   15,   72,   15,   15,   37,   95,   15,
       15,  253,   15,   37,   99,   80,   80,   15,   95,   15,
       99,  251,  243,   15,   15,   16,   16,   16,   16,  100,
      105,  106,  107,  100,  112,  106,  105,   16,  107,  192,
      112,  188,   16,   21,   21,   21,  188,   21,  239,   21,
      232,  192,  231,   21,   21,   21,   21,   21,  238,  229,
       21,  219,  108,  238,  231,  108,  218,   21,   28,   28,
       28,  108,   28,  115,  115,   28,   28,  217,  211,  115,
      210,  209,   28,  208,  115,  206,   28,   28,   89,   89,

       89,  201,   89,  200,   89,  196,  189,  187,   89,  183,
      181,   89,   89,  180,  179,   89,  178,  177,  176,  171,
      170,  168,   89,  264,  167,  264,  264,  264,  265,  265,
      266,  266,  266,  267,  267,  267,  268,  268,  161,  157,
      156,  154,  150,  143,  140,  139,  133,  132,  121,  120,
      119,  118,  117,  116,  111,  110,  109,  104,  103,  102,
       98,   97,   96,   94,   93,   88,   87,   86,   83,   82,
       81,   79,   78,   77,   75,   73,   71,   69,   67,   65,
       61,   59,   55,   53,   50,   49,   48,   47,   41,   32,
       30,   29,   19,    3,  263,  263,  263,  263,  263,  263,

      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "../../src/intel-lex.ll"
/*************************************************************************
 * intel-lex.ll -- This file is part of sasm.                            *
 * Copyright (C) 2021                                                    *
 *                                                                       *
 * This program is free software: you can redistribute it and/or modify  *
 * it under the terms of the GNU General Public License as published by  *
 * the Free Software Foundation, either version 3 of the License, or     *
 * (at your option) any later version.                                   *
 *                                                                       *
 * This program is distributed in the hope that it will be useful,       *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          *
 * GNU General Public License for more details.                          *
 *                                                                       *
 * You should have received a copy of the GNU General Public License     *
 * along with this program. If not, see <https://www.gnu.org/licenses/>. *
 *************************************************************************/
#line 20 "../../src/intel-lex.ll"

#define _COFF_DISABLE_DEFINES /* Prevent name clashes with Yacc defines */

#include <string>
#include "gen-obj.hh"
#include "intel-parse.hh"

#define SAVE_NUMBER (yylval.number = std::stoll (yytext, nullptr, 0))
#define SAVE_STRING (yylval.string = new std::string (yytext, yyleng))

#line 630 "../../src/intel-lex.cc"
#line 631 "../../src/intel-lex.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 35 "../../src/intel-lex.ll"


#line 849 "../../src/intel-lex.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 264 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 295 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 37 "../../src/intel-lex.ll"
;
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 38 "../../src/intel-lex.ll"
yylineno++; return '\n';
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 39 "../../src/intel-lex.ll"
SAVE_NUMBER; return T_NUMBER;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 40 "../../src/intel-lex.ll"
SAVE_NUMBER; return T_NUMBER;
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 41 "../../src/intel-lex.ll"
yylval.number = *(yytext + 1); return T_CHAR;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 42 "../../src/intel-lex.ll"
return T_BYTE;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 43 "../../src/intel-lex.ll"
return T_WORD;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 44 "../../src/intel-lex.ll"
return T_DWORD;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 45 "../../src/intel-lex.ll"
return T_NEAR;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 46 "../../src/intel-lex.ll"
return T_FAR;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 47 "../../src/intel-lex.ll"
yylval.zo = AsmInstZOType::AAA; return T_ZO;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 48 "../../src/intel-lex.ll"
return T_AAD;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 49 "../../src/intel-lex.ll"
return T_AAM;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 50 "../../src/intel-lex.ll"
yylval.zo = AsmInstZOType::AAS; return T_ZO;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 51 "../../src/intel-lex.ll"
yylval.arith = AsmInstARITHType::ADC; return T_ARTH;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 52 "../../src/intel-lex.ll"
yylval.arith = AsmInstARITHType::ADD; return T_ARTH;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 53 "../../src/intel-lex.ll"
yylval.arith = AsmInstARITHType::AND; return T_ARTH;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 54 "../../src/intel-lex.ll"
return T_CALL;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 55 "../../src/intel-lex.ll"
yylval.zo = AsmInstZOType::CBW; return T_ZO;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 56 "../../src/intel-lex.ll"
yylval.zo = AsmInstZOType::CDQ; return T_ZO;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 57 "../../src/intel-lex.ll"
yylval.zo = AsmInstZOType::CLC; return T_ZO;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 58 "../../src/intel-lex.ll"
yylval.zo = AsmInstZOType::CLD; return T_ZO;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 59 "../../src/intel-lex.ll"
yylval.zo = AsmInstZOType::CLI; return T_ZO;;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 60 "../../src/intel-lex.ll"
yylval.arith = AsmInstARITHType::CMP; return T_ARTH;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 61 "../../src/intel-lex.ll"
yylval.zos = AsmInstZOSType::CMPS; return T_ZOS;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 62 "../../src/intel-lex.ll"
yylval.zo = AsmInstZOType::CWD; return T_ZO;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 63 "../../src/intel-lex.ll"
yylval.zo = AsmInstZOType::CWDE; return T_ZO;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 64 "../../src/intel-lex.ll"
return T_DEC;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 65 "../../src/intel-lex.ll"
return T_DIV;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 66 "../../src/intel-lex.ll"
yylval.zo = AsmInstZOType::ENTER; return T_ZO;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 67 "../../src/intel-lex.ll"
yylval.zo = AsmInstZOType::HLT; return T_ZO;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 68 "../../src/intel-lex.ll"
return T_IDIV;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 69 "../../src/intel-lex.ll"
return T_IMUL;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 70 "../../src/intel-lex.ll"
return T_IN;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 71 "../../src/intel-lex.ll"
return T_INC;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 72 "../../src/intel-lex.ll"
yylval.zos = AsmInstZOSType::INS; return T_ZOS;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 73 "../../src/intel-lex.ll"
return T_INT;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 74 "../../src/intel-lex.ll"
yylval.zo = AsmInstZOType::INT3; return T_ZO;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 75 "../../src/intel-lex.ll"
yylval.zo = AsmInstZOType::INTO; return T_ZO;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 76 "../../src/intel-lex.ll"
yylval.zo = AsmInstZOType::IRET; return T_ZO;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 77 "../../src/intel-lex.ll"
yylval.jf = AsmInstJFType::JO; return T_JF;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 78 "../../src/intel-lex.ll"
yylval.jf = AsmInstJFType::JNO; return T_JF;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 79 "../../src/intel-lex.ll"
yylval.jf = AsmInstJFType::JC; return T_JF;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 80 "../../src/intel-lex.ll"
yylval.jf = AsmInstJFType::JNC; return T_JF;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 81 "../../src/intel-lex.ll"
yylval.jf = AsmInstJFType::JZ; return T_JF;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 82 "../../src/intel-lex.ll"
yylval.jf = AsmInstJFType::JNZ; return T_JF;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 83 "../../src/intel-lex.ll"
yylval.jf = AsmInstJFType::JNA; return T_JF;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 84 "../../src/intel-lex.ll"
yylval.jf = AsmInstJFType::JA; return T_JF;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 85 "../../src/intel-lex.ll"
yylval.jf = AsmInstJFType::JS; return T_JF;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 86 "../../src/intel-lex.ll"
yylval.jf = AsmInstJFType::JNS; return T_JF;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 87 "../../src/intel-lex.ll"
yylval.jf = AsmInstJFType::JP; return T_JF;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 88 "../../src/intel-lex.ll"
yylval.jf = AsmInstJFType::JNP; return T_JF;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 89 "../../src/intel-lex.ll"
yylval.jf = AsmInstJFType::JL; return T_JF;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 90 "../../src/intel-lex.ll"
yylval.jf = AsmInstJFType::JNL; return T_JF;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 91 "../../src/intel-lex.ll"
yylval.jf = AsmInstJFType::JNG; return T_JF;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 92 "../../src/intel-lex.ll"
yylval.jf = AsmInstJFType::JG; return T_JF;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 93 "../../src/intel-lex.ll"
return T_JMP;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 94 "../../src/intel-lex.ll"
yylval.zo = AsmInstZOType::LAHF; return T_ZO;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 95 "../../src/intel-lex.ll"
return T_LEA;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 96 "../../src/intel-lex.ll"
yylval.zo = AsmInstZOType::LEAVE; return T_ZO;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 97 "../../src/intel-lex.ll"
yylval.zos = AsmInstZOSType::LODS; return T_ZOS;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 98 "../../src/intel-lex.ll"
return T_LOOP;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 99 "../../src/intel-lex.ll"
return T_LOOPNZ;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 100 "../../src/intel-lex.ll"
return T_LOOPZ;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 101 "../../src/intel-lex.ll"
return T_MOV;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 102 "../../src/intel-lex.ll"
yylval.zos = AsmInstZOSType::MOVS; return T_ZOS;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 103 "../../src/intel-lex.ll"
return T_MUL;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 104 "../../src/intel-lex.ll"
return T_NEG;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 105 "../../src/intel-lex.ll"
return T_NOP;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 106 "../../src/intel-lex.ll"
return T_NOT;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 107 "../../src/intel-lex.ll"
yylval.arith = AsmInstARITHType::OR; return T_ARTH;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 108 "../../src/intel-lex.ll"
return T_OUT;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 109 "../../src/intel-lex.ll"
yylval.zos = AsmInstZOSType::OUTS; return T_ZOS;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 110 "../../src/intel-lex.ll"
return T_POP;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 111 "../../src/intel-lex.ll"
yylval.zo = AsmInstZOType::POPA; return T_ZO;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 112 "../../src/intel-lex.ll"
yylval.zo = AsmInstZOType::POPF; return T_ZO;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 113 "../../src/intel-lex.ll"
return T_PUSH;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 114 "../../src/intel-lex.ll"
yylval.zo = AsmInstZOType::PUSHA; return T_ZO;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 115 "../../src/intel-lex.ll"
yylval.zo = AsmInstZOType::PUSHF; return T_ZO;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 116 "../../src/intel-lex.ll"
yylval.rotshf = AsmInstROTSHFType::RCL; return T_ROTSHF;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 117 "../../src/intel-lex.ll"
yylval.rotshf = AsmInstROTSHFType::RCR; return T_ROTSHF;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 118 "../../src/intel-lex.ll"
return T_REPNZ;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 119 "../../src/intel-lex.ll"
return T_REPZ;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 120 "../../src/intel-lex.ll"
return T_RET;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 121 "../../src/intel-lex.ll"
yylval.rotshf = AsmInstROTSHFType::ROL; return T_ROTSHF;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 122 "../../src/intel-lex.ll"
yylval.rotshf = AsmInstROTSHFType::ROR; return T_ROTSHF;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 123 "../../src/intel-lex.ll"
yylval.zo = AsmInstZOType::SAHF; return T_ZO;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 124 "../../src/intel-lex.ll"
yylval.rotshf = AsmInstROTSHFType::SAR; return T_ROTSHF;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 125 "../../src/intel-lex.ll"
yylval.arith = AsmInstARITHType::SBB; return T_ARTH;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 126 "../../src/intel-lex.ll"
yylval.zos = AsmInstZOSType::SCAS; return T_ZOS;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 127 "../../src/intel-lex.ll"
yylval.rotshf = AsmInstROTSHFType::SHL; return T_ROTSHF;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 128 "../../src/intel-lex.ll"
yylval.rotshf = AsmInstROTSHFType::SHR; return T_ROTSHF;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 129 "../../src/intel-lex.ll"
yylval.zo = AsmInstZOType::STC; return T_ZO;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 130 "../../src/intel-lex.ll"
yylval.zo = AsmInstZOType::STD; return T_ZO;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 131 "../../src/intel-lex.ll"
yylval.zos = AsmInstZOSType::STOS; return T_ZOS;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 132 "../../src/intel-lex.ll"
yylval.zo = AsmInstZOType::STI; return T_ZO;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 133 "../../src/intel-lex.ll"
yylval.arith = AsmInstARITHType::SUB; return T_ARTH;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 134 "../../src/intel-lex.ll"
return T_TEST;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 135 "../../src/intel-lex.ll"
return T_XCHG;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 136 "../../src/intel-lex.ll"
yylval.zo = AsmInstZOType::XLAT; return T_ZO;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 137 "../../src/intel-lex.ll"
yylval.arith = AsmInstARITHType::XOR; return T_ARTH;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 138 "../../src/intel-lex.ll"
return T_CS;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 139 "../../src/intel-lex.ll"
return T_DS;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 140 "../../src/intel-lex.ll"
return T_ES;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 141 "../../src/intel-lex.ll"
return T_FS;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 142 "../../src/intel-lex.ll"
return T_GS;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 143 "../../src/intel-lex.ll"
return T_AL;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 144 "../../src/intel-lex.ll"
return T_CL;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 145 "../../src/intel-lex.ll"
return T_DL;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 146 "../../src/intel-lex.ll"
return T_BL;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 147 "../../src/intel-lex.ll"
return T_AH;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 148 "../../src/intel-lex.ll"
return T_CH;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 149 "../../src/intel-lex.ll"
return T_DH;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 150 "../../src/intel-lex.ll"
return T_BH;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 151 "../../src/intel-lex.ll"
return T_AX;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 152 "../../src/intel-lex.ll"
return T_CX;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 153 "../../src/intel-lex.ll"
return T_DX;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 154 "../../src/intel-lex.ll"
return T_BX;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 155 "../../src/intel-lex.ll"
return T_SP;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 156 "../../src/intel-lex.ll"
return T_BP;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 157 "../../src/intel-lex.ll"
return T_SI;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 158 "../../src/intel-lex.ll"
return T_DI;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 159 "../../src/intel-lex.ll"
return T_EAX;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 160 "../../src/intel-lex.ll"
return T_ECX;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 161 "../../src/intel-lex.ll"
return T_EDX;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 162 "../../src/intel-lex.ll"
return T_EBX;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 163 "../../src/intel-lex.ll"
return T_ESP;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 164 "../../src/intel-lex.ll"
return T_EBP;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 165 "../../src/intel-lex.ll"
return T_ESI;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 166 "../../src/intel-lex.ll"
return T_EDI;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 167 "../../src/intel-lex.ll"
return T_DB;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 168 "../../src/intel-lex.ll"
return T_DW;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 169 "../../src/intel-lex.ll"
return T_DD;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 170 "../../src/intel-lex.ll"
return T_DQ;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 171 "../../src/intel-lex.ll"
return T_SECTION;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 172 "../../src/intel-lex.ll"
return T_GLOBAL;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 173 "../../src/intel-lex.ll"
SAVE_STRING; return T_IDENT;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 174 "../../src/intel-lex.ll"
SAVE_STRING; return T_SECTNAME;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 175 "../../src/intel-lex.ll"
return *yytext;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 177 "../../src/intel-lex.ll"
ECHO;
	YY_BREAK
#line 1608 "../../src/intel-lex.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 264 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 264 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 263);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 177 "../../src/intel-lex.ll"


